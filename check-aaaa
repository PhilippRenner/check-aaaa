#!/usr/bin/env python
#
# check-aaaa: A small python program to query a set of DNS names
# for the presence of AAAA records via a set of DNS recursive
# resolvers.
# Authors:
#   - Shumon Huque <shuque -@- upenn.edu>
#   - Joerg Kastning <jkastning -@- my-it-brain.de>
# Licence: GPL-2.0-or-later
# Licence URL: https://spdx.org/licenses/GPL-2.0-or-later.html

import os, sys, time
import dns.message, dns.query

# List of DNS recursive resolvers to test. Entries in the list are 
# tuples of shortname and IP address (IPv4 or IPv6). Replace these
# with your own resolver addresses.
RESOLVERS = [
    ("resolver1", "192.168.11.3"),
#    ("resolver2", "198.51.100.29"),
#    ("resolver3", "10.4.4.4"),
    ]

RETRIES=3
TIMEOUT=3

# A file with a list of DNS names to test for presence of AAAA records
# is passed as an argument to this script. See TXT files in this repo
# for examples.
# The '.' at the end of the DNS name is important!
FILENAME = sys.argv[1]

with open(FILENAME) as f:
  QNAMES = [line.rstrip() for line in f]

def send_query_udp(qname, res_name, res_ip, timeout, retries):
    gotresponse = False
    res = None
    msg = dns.message.make_query(qname, 'AAAA')
    while (not gotresponse and (retries > 0)):
        retries -= 1
        try:
            ## print("DEBUG: query %s %s" % (res_ip, qname))
            res = dns.query.udp(msg, res_ip, timeout=timeout)
            gotresponse = True
        except dns.exception.Timeout:
            pass
    return res

rc = 0
for res_name, res_ip in RESOLVERS:
    for qname in QNAMES:
        res = send_query_udp(qname, res_name, res_ip, TIMEOUT, RETRIES)
        if res == None:
            rc = 1
            print("%s,%s -> %s query timed out" % (res_name, res_ip, qname))
            continue
        for rrset in res.answer:
            if rrset.rdtype == 28:             # RR type code for AAAA
                print("%s,%s -> %s is returning AAAA" % \
                    (res_name, res_ip, qname))
                break
#        else:
#            rc = 1
#            print("%s,%s -> %s not returning AAAA" % \
#                (res_name, res_ip, qname))

sys.exit(rc)
